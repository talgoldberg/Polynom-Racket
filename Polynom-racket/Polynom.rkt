#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 74 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 2719 0 28 3 11 #"#lang pl 02"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;308361476"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"Q1 : BNF (SE)"
0 0 17 29 1 #"\n"
0 0 17 3 134
(4
 #"BNF for \"SE\": A similar simple language of \"string expressions\"."
 #" Only digits 0, ..., 9 are allowed as valid characters within string"
 #"s."
) 0 0 17 29 1 #"\n"
0 0 17 3 125
(5
 #"The legal operators that can be used in these expressions are string"
 #", string-length and string-append, and also string-insert"
) 0 0 17 29 1 #"\n"
0 0 17 3 125
(6
 #"And number-> string. It is also legal to accept expressions of the f"
 #"orm \"<D>\", where <D> represents a (final) digit sequence."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"The following grammar requirements:"
0 0 17 29 1 #"\n"
0 0 17 3 64
#"A string is allowed with a sequence of any number of characters."
0 0 17 29 1 #"\n"
0 0 17 3 58
#"String-allowed is allowed with a sequence of any number of"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"Expressions representing strings. String allowed with"
0 0 17 29 1 #"\n"
0 0 17 3 70
(7
 #"An expression representing a string, a character and a natural numbe"
 #"r."
) 0 0 17 29 1 #"\n"
0 0 17 3 51 #"Number-> A string is allowed with a natural number."
0 0 17 29 1 #"\n"
0 0 17 3 120
(8
 #"|----------------------------------------------------------------1.a"
 #"---------------------------------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"<SE>::= <num-digit>        //1"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"       |<string-digit>       //2"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"       |<char-num>       //3"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"<num-digit>::= <num>                  //4"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"              |<num> <num-digit>      //5"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"              "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"<char-digit>  ::= <char-num>                  //6"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"                  |<char-num> <char-digit>    //7"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"<char-num>::=\\#<num>   //8"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"<string-num>::= \"<num>\"   //9"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"                |\"<num><string-num>\"   //10"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"<num>::= 0"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |1"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |2"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |3"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"         |4    //11"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |5"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |6"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |7"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |8"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"         |9"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"<string-digit> ::=   <string-num>       //12"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"                   | <num-digit>"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"                   | {string <char-digit>}    //13"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"                   | {string-append <string-combanition>}  //14"
0 0 17 29 1 #"\n"
0 0 17 3 95
(9
 #"                   | {string-insert <string-combanition> <char-num> "
 #"<digit-combanition>}   //15"
) 0 0 17 29 1 #"\n"
0 0 17 3 64
#"                   | {string-length <string-combanition>}   //16"
0 0 17 29 1 #"\n"
0 0 17 3 64
#"                   | (number->string <digit-combanition>)   //17"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"                   |"
0 0 17 3 13 #" \360\235\234\206    //18"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 38 #"<string-combanition> ::=  \360\235\234\206    //19"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"                         |<string-num>    //20"
0 0 17 29 1 #"\n"
0 0 17 3 57
(10
 #"                         |\360\235\234\206 <string-combanition>  //2"
 #"1"
) 0 0 17 29 1 #"\n"
0 0 17 3 66
#"                         |<string-num> <string-combanition>   //22"
0 0 17 29 1 #"\n"
0 0 17 3 89
(11
 #"                         |{string-append <string-combanition>}<strin"
 #"g-combanition>   //23"
) 0 0 17 29 1 #"\n"
0 0 17 3 91
(12
 #"                         |{string <char-digit>} <string-combanition>"
 #"                   //24"
) 0 0 17 29 1 #"\n"
0 0 17 3 89
(13
 #"                         |{number->string <digit-combanition>} <stri"
 #"ng-combanition>  //25"
) 0 0 17 29 1 #"\n"
0 0 17 3 121
(14
 #"                         |{string-insert <string-combanition> <char-"
 #"num> <digit-combanition>} <string-combanition>   //26"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"<digit-combanition> ::= <num-digit>   //27"
0 0 17 29 1 #"\n"
0 0 17 3 67
#"                        |{string-length <string-combanition>}   /28"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 131
(15
 #"|------------------------------------------------------------1.b----"
 #"--------------------------------------------------------------|"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"Example 1:"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"(string-append  \"901\" \"66\" )"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"<SE>"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"<string-digit> //2    ??"
0 0 17 29 1 #"\n"
0 0 17 3 110
(16
 #"<string-digit>::{string-append <string-combanition>}  //14   -------"
 #"-------------------->   (string-append ??)"
) 0 0 17 29 1 #"\n"
0 0 17 3 131
(17
 #"<string-combanition>::{number->string <digit-combanition>} <string-c"
 #"ombanition>  //25 --->  (string-append (number->string ??)??)??"
) 0 0 17 29 1 #"\n"
0 0 17 3 132
(18
 #"<digit-combanition> ::= <num-digit> //4 //11                //27 ---"
 #"----------------------> (string-append (number->string 901)??)??"
) 0 0 17 29 1 #"\n"
0 0 17 3 67
#"                        |{string-length <string-combanition>} //28 "
0 0 17 29 1 #"\n"
0 0 17 3 133
(19
 #"<string-num>    //20       -----------------------------------------"
 #"------------------->     (string-append (number->string 901)??)??"
) 0 0 17 29 1 #"\n"
0 0 17 3 148
(20
 #"<string-num>::= \"<num>\" //11         //9   -----------------------"
 #"--------------------->     (string-append (string-append (number->st"
 #"ring 901)\"66\")"
) 0 0 17 29 1 #"\n"
0 0 17 3 43 #"                |\"<num><string-num>\"   //10"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"RESULT: (string-append \"901\" \"66\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"Example 2:"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"(string-length \"123\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"<SE>"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"<string-digit> //2    ??"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 115
(21
 #"<string-digit>::{string-length <string-combanition>}   //16  -------"
 #"------------------------>    (string-length ??)"
) 0 0 17 29 1 #"\n"
0 0 17 3 134
(22
 #"<string-combanition>:: {number->string <digit-combanition>} <string-"
 #"combanition>  //25 ----->    (string-length (number->string ??))??"
) 0 0 17 29 1 #"\n"
0 0 17 3 133
(23
 #"<digit-combanition> ::= <num-digit> //4 //11                //27 ---"
 #"------------------------>    (string-length (number->string 123))"
) 0 0 17 29 1 #"\n"
0 0 17 3 67
#"                        |{string-length <string-combanition>} //28 "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"RESULT: (string-length \"123\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"Example 3:"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"(string-insert \"789\" \\#6 5)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"<SE>"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"<string-digit> //2 ----> ??"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 118
(24
 #"<string-digit>::{string-insert <string-combanition> <char-num> <digi"
 #"t-combanition>} //15 ---> (string-insert ?? ?? ??)"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 105
(25
 #"<string-combanition>::<string-num>  //20 ---------------------------"
 #"--------> (string-insert \"789\" ?? ??)"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 105
(26
 #"<char-num>:: <char-num>::=\\#<num>   //8 ---------------------------"
 #"--------> (string-insert \"789\" \\#6 ??)"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 121
(27
 #"<digit-combanition>:: <digit-combanition> ::= <num-digit>   //27   -"
 #"-------> (string-insert \"789\" \\#6 (string-length ??))"
) 0 0 17 29 1 #"\n"
0 0 17 3 68
#"                        |{string-length <string-combanition>}   /28 "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"<string-combanition>:: <string-num> :: //20 "
0 0 17 3 82
(28
 #"<string-num>::= \"<num>\"  //9 --> (string-insert \"789\" \\#6 (stri"
 #"ng-length \"12345\"))"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(29
 #"                                            |\"<num><string-num>\"  "
 #" //10"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"RESULT: (string-insert \"789\" \\#6 5)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"Q2 :"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"Function: sum-of-squares:(without use map)"
0 0 17 29 1 #"\n"
0 0 17 3 92
(30
 #"The function receives a list, and returns the amount of squares for "
 #"each member in the list,"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"with useing foldl function and square function."
0 0 17 29 1 #"\n"
0 0 17 3 34 #"Function: square : get number and "
0 0 17 3 6 #"calcul"
0 0 17 3 35 #"ate is square and return is square."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))) ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #")("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 2 #"77"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 3 #"174"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 2 #"34"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 3 #"108"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sum-of-squares"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"Q3.a :"
0 0 17 29 1 #"\n"
0 0 17 3 79
(31
 #"In this question I created a polynomial using a list of numbers (coe"
 #"fficients),"
) 0 0 17 29 1 #"\n"
0 0 17 3 94
(32
 #"and after a polynomial is created the input X (number) will return a"
 #" result of the polynomial."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"createPolynomial"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #"))"
0 0 17 3 67
#";; <fill-in> : (Number -> Number) for input and use polyX and poly."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"createPolynomial"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"poly"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #") "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"poly"
0 0 24 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"power"
0 0 24 3 1 #" "
0 0 14 3 5 #"accum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 24 3 2 #") "
0 0 14 3 5 #"accum"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"accum"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 24 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"power"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"argsL"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"power"
0 0 24 3 2 #") "
0 0 14 3 5 #"accum"
0 0 24 3 6 #"))])) "
0 0 17 3 73
(33
 #";; use in  tail recursion for calculate the input: x (number) for po"
 #"lynom"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"polyX"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"polyX"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"poly"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 17 3 65
#";; <fill-in> : (poly lst x 0 0) : to return a number for input x."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"polyX"
0 0 24 3 2 #") "
0 0 17 3 74
(34
 #";; <fill-in> : polyX : to return for createPolynomial (Number -> Num"
 #"ber). "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"p2345"
0 0 24 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"p2345"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"p2345"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"p2345"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"p536"
0 0 24 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"p536"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"p536"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"p_0"
0 0 24 3 2 #" ("
0 0 14 3 16 #"createPolynomial"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"p_0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"Q3.b :"
0 0 17 29 1 #"\n"
0 0 17 3 75
(35
 #"In this question I created an expression that defines a polynomial ("
 #"PLANG),"
) 0 0 17 29 1 #"\n"
0 0 17 3 48 #"with help that defines expressions of type (AE)."
0 0 17 29 1 #"\n"
0 0 17 3 126
(36
 #"and after an expression of a polynomial is created, we want to calcu"
 #"late it using a list of coefficients and a list of points."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"PLANG"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 3 #")])"
0 0 17 3 27 #";; <fill-in> : (Listof AE) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ["
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ["
0 0 14 3 3 #"Add"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ["
0 0 14 3 3 #"Sub"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ["
0 0 14 3 3 #"Mul"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ["
0 0 14 3 3 #"Div"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 7 #"number:"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Add"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Sub"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 4 #")  ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Mul"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Div"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"bad syntax in ~s\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"sexpr"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"PLANG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"parse-sexp"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #"  "
0 0 14 3 5 #"Sexpr"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 5 #"PLANG"
0 0 24 3 17 #")                "
0 0 17 3 48 #";; HELP-FUNCTION : get a Sexpr and return PLANG."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"parse-sexp*"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 3 #")) "
0 0 17 3 61
#";; HELP-FUNCTION : get a list of Sexpr and return list of AE."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; parse-sexp :"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; Checks if there is a match for two-list expressions."
0 0 24 29 1 #"\n"
0 0 17 3 79
(37
 #";; List 1: (list of Sexpr) Contains poly symbol and other arguments "
 #"(type AE). "
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #";; List 2: (list of Sexpr) Contains arguments (type AE)."
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; Use"
0 0 17 3 1 #" "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 9 #"auxiliary"
0 0 17 3 1 #" "
0 0 17 3 23 #"function (parse-sexp*) "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 72
(38
 #"return list of (type AE) And at the end approached the builder of PL"
 #"ANG."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"parse-sexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"poly"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"parse: at least one coefficient is required in ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"poly"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"parse: at least one point is  required in ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"poly"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexp*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 11 #"parse-sexp*"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"parse: bad syntax in ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; parse-sexp* :"
0 0 24 29 1 #"\n"
0 0 17 3 99
(39
 #";;Receives a list of Sexpr And recursively creates a list of (type A"
 #"E) with the help of parse-sexpr"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexp*"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"null"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #"))) ("
0 0 14 3 11 #"parse-sexp*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 2 #"(["
0 0 14 3 4 #"code"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string->sexpr"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 5 #")]) ("
0 0 14 3 10 #"parse-sexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"code"
0 0 24 3 3 #")))"
0 0 17 3 48 #";; <fill-in> : (parse-sexp code) to return PLANG"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 2 #" {"
0 0 19 3 1 #"+"
0 0 19 3 1 #" "
0 0 19 3 1 #"3"
0 0 19 3 1 #" "
0 0 19 3 1 #"4"
0 0 19 3 2 #"} "
0 0 19 3 1 #"4"
0 0 19 3 3 #"} {"
0 0 19 3 1 #"6"
0 0 19 3 2 #" {"
0 0 19 3 1 #"-"
0 0 19 3 2 #" {"
0 0 19 3 1 #"+"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 1 #"5"
0 0 19 3 14 #"} {* 10 4}}}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"Mul"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 1 #"3"
0 0 19 3 11 #"} {1 2 3}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 1 #" "
0 0 19 3 3 #"4/5"
0 0 19 3 16 #" } {1/2 2/3 3}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 8          10 21 4 #"4/5\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 8          10 21 4 #"1/2\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 8          10 21 4 #"2/3\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{{poly 2 3} {4}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 22 #"poly 1 1 0} {-1 3 3}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 2 #" {"
0 0 19 3 1 #"/"
0 0 19 3 1 #" "
0 0 19 3 1 #"4"
0 0 19 3 1 #" "
0 0 19 3 23 #"2} {- 4 1}} {{- 8 4}}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Div"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"Sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 2 #" {"
0 0 19 3 1 #"+"
0 0 19 3 1 #" "
0 0 19 3 1 #"0"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 2 #"} "
0 0 19 3 1 #"1"
0 0 19 3 2 #" {"
0 0 19 3 1 #"*"
0 0 19 3 1 #" "
0 0 19 3 1 #"0"
0 0 19 3 1 #" "
0 0 19 3 1 #"9"
0 0 19 3 5 #"}} {{"
0 0 19 3 20 #"- 4 5} 3 {/ 27 9}}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Poly"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Mul"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Div"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"27"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{{poly } {1 2} }\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 2 #"at"
0 0 19 3 1 #" "
0 0 19 3 5 #"least"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 42 #"coefficient is required in ((poly) (1 2))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{{poly 1 2} {} }\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 2 #"at"
0 0 19 3 1 #" "
0 0 19 3 5 #"least"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 38 #"point is  required in ((poly 1 2) ())\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"{{poly } {1 2 3} }\""
0 0 24 3 1 #")"
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 2 #"at"
0 0 19 3 1 #" "
0 0 19 3 5 #"least"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 11 #"coefficient"
0 0 19 3 1 #" "
0 0 19 3 32 #"is required in ((poly) (1 2 3))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 1 #" "
0 0 19 3 3 #"4/5"
0 0 19 3 4 #" } {"
0 0 19 3 4 #"poly"
0 0 19 3 1 #" "
0 0 19 3 3 #"1/2"
0 0 19 3 1 #" "
0 0 19 3 22 #"2/3 3} {1 2 4} {1 2}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 3 #"bad"
0 0 19 3 1 #" "
0 0 19 3 6 #"syntax"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 3 #" (("
0 0 19 3 4 #"poly"
0 0 19 3 1 #" "
0 0 19 3 3 #"4/5"
0 0 19 3 3 #") ("
0 0 19 3 4 #"poly"
0 0 19 3 1 #" "
0 0 19 3 3 #"1/2"
0 0 19 3 1 #" "
0 0 19 3 22 #"2/3 3) (1 2 4) (1 2))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"{{poly 2 3} {}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 2 #"at"
0 0 19 3 1 #" "
0 0 19 3 5 #"least"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 38 #"point is  required in ((poly 2 3) ())\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"{{poly 1 1 3} }\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 29 #"bad syntax in ((poly 1 1 3))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"{{} }\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"parse: bad syntax in (())\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"{{} {}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"parse: bad syntax in (() ())\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"{{1 2 4} {1 2 3}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 3 #"bad"
0 0 19 3 1 #" "
0 0 19 3 6 #"syntax"
0 0 19 3 1 #" "
0 0 19 3 21 #"in ((1 2 4) (1 2 3))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #"("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"{{poly} {1 2 3} {poly}}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 3 #"bad"
0 0 19 3 1 #" "
0 0 19 3 34 #"syntax in ((poly) (1 2 3) (poly))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #"  "
0 0 14 3 2 #"AE"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 3 #"Add"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 3 #"Sub"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 3 #"Mul"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 3 #"Div"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"eval-poly-list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 3 #")) "
0 0 17 3 17 #";; HELP-FUNCTION "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"poly-help"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #") "
0 0 14 3 6 #"Number"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #") "
0 0 17 3 17 #";; HELP-FUNCTION "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"poly-help"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 3 #"ACC"
0 0 24 3 2 #") "
0 0 17 3 45 #";;calculate a polynomial. and return a number"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 3 #"ACC"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"poly-help"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 1 #"N"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"ACC"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;eval-poly-list :"
0 0 24 29 1 #"\n"
0 0 17 3 73
(40
 #";;The function gets two lists of numbers from the function eval-poly"
 #"-help"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";;List 1: of coefficients"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;List 2: of points."
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;And uses the function (poly-help) to calculate a polynomial."
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;And finally returns the required list."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"eval-poly-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #" "
0 0 14 3 2 #"rs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"rs"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 9 #"poly-help"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"rs"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"eval-poly-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"rs"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;eval-poly-help :"
0 0 24 29 1 #"\n"
0 0 17 3 74
(41
 #";;The function gets a list of (type AE), And is aided by the functio"
 #"n eval"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(42
 #";;In order to decipher the expression of AE to a number, And finally"
 #" returns a list of numbers."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"eval-poly-help"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 2 #"AE"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #"))"
0 0 17 3 17 #";; HELP-FUNCTION "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"eval-poly-help"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 5 #"))) ("
0 0 14 3 14 #"eval-poly-help"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;eval-poly :"
0 0 24 29 1 #"\n"
0 0 17 3 82
(43
 #";;The function gets PLANG and checks if there is a match of two list"
 #"s of (type AE)"
) 0 0 24 29 1 #"\n"
0 0 17 3 112
(44
 #";;with help from function (eval-poly-help) , and return list of numb"
 #"er with help from function (eval-poly-list)."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"eval-poly"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"PLANG"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 3 #")) "
0 0 17 3 30 #";; <fill-in> : (Listof Number)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"eval-poly"
0 0 24 3 1 #" "
0 0 14 3 6 #"p-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"p-expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 12 #"]           "
0 0 17 3 19 #";; <fill-in> : code"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"p-expr"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"Poly"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"rst"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-poly-list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"eval-poly-help"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-poly-help"
0 0 24 3 1 #" "
0 0 14 3 3 #"rst"
0 0 24 3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 17 3 25 #";; return list of number "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"eval-poly"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 21 #"poly 1 2 3} {1 2 3}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #" "
0 0 21 3 2 #"34"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 21 #"poly 4 2 7} {1 4 9}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"13"
0 0 24 3 1 #" "
0 0 21 3 3 #"124"
0 0 24 3 1 #" "
0 0 21 3 3 #"589"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 21 #"poly 1 2 3} {1 2 3}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #" "
0 0 21 3 2 #"34"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"{{poly 4/5 } {1/2 2/3 3}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"4/5"
0 0 24 3 1 #" "
0 0 21 3 3 #"4/5"
0 0 24 3 1 #" "
0 0 21 3 3 #"4/5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{{poly 2 3} {4}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"14"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 22 #"poly 1 1 0} {-1 3 3}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 2 #" {"
0 0 19 3 1 #"/"
0 0 19 3 1 #" "
0 0 19 3 1 #"4"
0 0 19 3 1 #" "
0 0 19 3 23 #"2} {- 4 1}} {{- 8 4}}}\""
0 0 24 3 1 #")"
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"14"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 2 #" {"
0 0 19 3 1 #"*"
0 0 19 3 1 #" "
0 0 19 3 1 #"4"
0 0 19 3 1 #" "
0 0 19 3 2 #"-2"
0 0 19 3 3 #"} {"
0 0 19 3 1 #"+"
0 0 19 3 1 #" "
0 0 19 3 1 #"5"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 3 #"} {"
0 0 19 3 1 #"-"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 23 #"1}} {{- 8 4} {+ 1 1}}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"36"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"{{"
0 0 19 3 4 #"poly"
0 0 19 3 2 #" {"
0 0 19 3 1 #"+"
0 0 19 3 1 #" "
0 0 19 3 1 #"0"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 2 #"} "
0 0 19 3 1 #"1"
0 0 19 3 2 #" {"
0 0 19 3 1 #"*"
0 0 19 3 1 #" "
0 0 19 3 1 #"0"
0 0 19 3 1 #" "
0 0 19 3 1 #"9"
0 0 19 3 5 #"}} {{"
0 0 19 3 20 #"- 4 5} 3 {/ 27 9}}}\""
0 0 24 3 2 #") "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"{{poly } {1 2} }\""
0 0 24 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"parse:"
0 0 19 3 1 #" "
0 0 19 3 2 #"at"
0 0 19 3 1 #" "
0 0 19 3 5 #"least"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 42 #"coefficient is required in ((poly) (1 2))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
